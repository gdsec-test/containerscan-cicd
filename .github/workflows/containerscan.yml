on: [pull_request]

name: scan container images
env:
  TL_USER: ${{ secrets.TL_USER }}
  TL_PASS: ${{ secrets.TL_PASS }}
  CONTAINER_IMAGE: badcontainer
  CONTAINER_IMAGE_TWISTCLI: containerscan


jobs:
  build-and-scan:
    name: Build and Scan for Vulnerabilities
    runs-on: self-hosted
    
    steps:
    - name: Checkout
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

    - name: Configure AWS credentials using Cloud Key Based Service Accounts
      uses: aws-actions/configure-aws-credentials@1ed6eed14f0f832cad5830fb357d937c2f20ec67
      with:
        aws-access-key-id: ${{ secrets.DEV_PRIVATE_AWS_SECRET_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.DEV_PRIVATE_AWS_SECRET_TOKEN_VALUE }}
        role-to-assume: ${{ secrets.DEV_AWS_DEPLOY_ROLE }}
        role-duration-seconds: 3600
        aws-region: us-west-2

    - name: Check AWS Role
      run: |
      aws sts get-caller-identity
    
    - name: Log into golden image ECR
      run: |
        aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 764525110978.dkr.ecr.us-west-2.amazonaws.com

    # - name: Build and tag the image
      # run: docker build -t $CONTAINER_IMAGE .

    - name: Build and tag the image twistcli
      run: docker build -t $CONTAINER_IMAGE_TWISTCLI ./docker
    
    - name: Build bad container
      run: docker build -t $CONTAINER_IMAGE ./test

    # - name: Scan the image
      # env:
        # TL_USER: ${{ secrets.PRISMA_ACCESSKEY }}
        # TL_PASS: ${{ secrets.PRISMA_SECRET_ID }}
      # run: |
        # docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:ro  -e AK=${TL_USER} -e SI=${TL_PASS} -e CONTAINER=${CONTAINER_IMAGE} $CONTAINER_IMAGE_TWISTCLI       